use num_traits::{FromBytes, ToBytes};

use crate::{key::*, finite_field::{PrimeField, ffint::FiniteFieldIntTrait, pfint::PFInt, uint_arr::{UintArr, arr_len, WORD}}};
use super::*;

mod modp768 {

    use num_traits::Pow;

    use super::*;

    const SIZE: usize = 96;

    type OpaqueInt = UintArr<WORD, {arr_len::<WORD>(SIZE)}, SIZE>;


    const MODP768_PRIME_BE_BYTES: [u8; SIZE] = [
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34, 0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08,
        0x8A, 0x67, 0xCC, 0x74, 0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD, 0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B,
        0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37, 0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6, 0xF4, 0x4C, 0x42, 0xE9,
        0xA6, 0x3A, 0x36, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    ];

    const MODP768_GENERATOR_BE_BYTES: [u8; SIZE] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    ];

    const MODP768_PRIME_MODINV_BE_BYTES: [u8; SIZE] = [
        0x51, 0x21, 0x13, 0xca, 0xfb, 0x6d, 0x26, 0x37, 0x2f, 0x57, 0x01, 0xeb, 0x26, 0x6b, 0xa1, 0x81, 0xe6, 0xa8, 0x4a, 0xbd, 0x14, 0xf7, 0x17, 0xa2, 0x86, 0x0e, 0xff, 0x50, 0xa7, 0x6a, 0x14, 0xec, 0x97, 0xe6, 0x28, 0x3e, 0x38, 0xfe, 0x0a, 0xc3, 0xbe, 0xdd, 0xaf, 0x9e, 0xb3, 0x35, 0x35, 0x40, 0x45, 0xba, 0x9b, 0x0d, 0x5b, 0x73, 0xbd, 0xce, 0x30, 0xfc, 0x00, 0x2d, 0xbf, 0xf5, 0xa3, 0x08, 0x86, 0x05, 0x62, 0xff, 0xad, 0x7b, 0x5f, 0x98, 0x0a, 0x13, 0x33, 0x08, 0x3f, 0x3b, 0x90, 0xf8, 0x0b, 0xb3, 0xbd, 0x16, 0x59, 0xc5, 0xc9, 0xde, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    ];

    const MODP768_PRIME_ADDINV_BE_BYTES: [u8; SIZE] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0xf0, 0x25, 0x5d, 0xde, 0x97, 0x3d, 0xcb, 0x3b, 0x39, 0x9d, 0x74, 0x7f, 0x23, 0xe3, 0x2e, 0xd6, 0xfd, 0xb1, 0xf7, 0x75, 0x98, 0x33, 0x8b, 0xfd, 0xf4, 0x41, 0x59, 0xc4, 0xec, 0x64, 0xdd, 0xae, 0xb5, 0xf7, 0x86, 0x71, 0xcb, 0xfb, 0x22, 0x10, 0x6a, 0xe6, 0x4c, 0x32, 0xc5, 0xbc, 0xe4, 0xcf, 0xd4, 0xf5, 0x92, 0x0d, 0xa0, 0xeb, 0xc8, 0xb0, 0x1e, 0xca, 0x92, 0x92, 0xae, 0x3d, 0xba, 0x1b, 0x7a, 0x4a, 0x89, 0x9d, 0xa1, 0x81, 0x39, 0x0b, 0xb3, 0xbd, 0x16, 0x59, 0xc5, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    ];

    const MODP768_N_MOD_P_BE_BYTES: [u8; SIZE] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0xf0, 0x25, 0x5d, 0xde, 0x97, 0x3d, 0xcb, 0x3b, 0x39, 0x9d, 0x74, 0x7f, 0x23, 0xe3, 0x2e, 0xd6, 0xfd, 0xb1, 0xf7, 0x75, 0x98, 0x33, 0x8b, 0xfd, 0xf4, 0x41, 0x59, 0xc4, 0xec, 0x64, 0xdd, 0xae, 0xb5, 0xf7, 0x86, 0x71, 0xcb, 0xfb, 0x22, 0x10, 0x6a, 0xe6, 0x4c, 0x32, 0xc5, 0xbc, 0xe4, 0xcf, 0xd4, 0xf5, 0x92, 0x0d, 0xa0, 0xeb, 0xc8, 0xb0, 0x1e, 0xca, 0x92, 0x92, 0xae, 0x3d, 0xba, 0x1b, 0x7a, 0x4a, 0x89, 0x9d, 0xa1, 0x81, 0x39, 0x0b, 0xb3, 0xbd, 0x16, 0x59, 0xc5, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    ];

    pub struct Modp768;

    #[derive(Debug, Clone, PartialEq, Eq)]
    struct Modp768Key(PFInt<'static, OpaqueInt>);

    static MODP768_PRIME_FIELD: PrimeField<OpaqueInt> = PrimeField::<OpaqueInt> {
        prime: OpaqueInt::const_from_be_bytes(MODP768_PRIME_BE_BYTES),
        prime_addinv: OpaqueInt::const_from_be_bytes(MODP768_PRIME_ADDINV_BE_BYTES),
        len: OpaqueInt::const_from_be_bytes(MODP768_N_MOD_P_BE_BYTES),
        modinv: OpaqueInt::const_from_be_bytes(MODP768_PRIME_MODINV_BE_BYTES),
    };
    
    static MODP768_GENERATOR: PFInt<'static, OpaqueInt> = PFInt::<OpaqueInt>::const_from_opaqueuint(
        OpaqueInt::const_from_be_bytes(MODP768_GENERATOR_BE_BYTES), &MODP768_PRIME_FIELD
    );

    impl FromBytes for Modp768Key {
        type Bytes = [u8];

        fn from_be_bytes(bytes: &Self::Bytes) -> Self {
            Self( PFInt::from_be_bytes(bytes, &MODP768_PRIME_FIELD) )
        }

        fn from_le_bytes(bytes: &Self::Bytes) -> Self {
            Self( PFInt::from_le_bytes(bytes, &MODP768_PRIME_FIELD) )
        }
    }

    impl ToBytes for Modp768Key {
        type Bytes = <PFInt<'static, OpaqueInt> as ToBytes>::Bytes;

        fn to_be_bytes(&self) -> Self::Bytes {
            self.0.to_be_bytes()
        }

        fn to_le_bytes(&self) -> Self::Bytes {
            self.0.to_le_bytes()
        }
    }

    impl Key<SIZE> for Modp768Key {
        const SIZE: usize = SIZE;
        
        fn from_slice(data: &[u8]) -> Self {
            Self::from_be_bytes(data)
        }
    }

    impl PrivateKey<SIZE> for Modp768Key {}

    impl PublicKey<SIZE> for Modp768Key {}

    impl SharedSecret<SIZE> for Modp768Key {}

    impl KeyExchangeTrait<SIZE, Modp768Key, Modp768Key, Modp768Key> for Modp768 {
        fn public_key(private_key: &Modp768Key) -> Modp768Key {
            Modp768Key( MODP768_GENERATOR.pow(private_key.0.to_opaqueuint()) )
        }
    
        fn shared_secret(private_key: Modp768Key, public_key: Modp768Key) -> Modp768Key {
            Modp768Key( public_key.0.pow(private_key.0.to_opaqueuint()) )
        }
    }

}


pub use modp768::Modp768;

