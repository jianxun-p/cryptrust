use num_traits::{FromBytes, ToBytes};

use crate::{
    key::*, ecc::{common_curves::curve448, FFEllipticCurveTrait, PFInt}, finite_field::ffint::{FFInt, FiniteFieldIntTrait},
};
use super::*;

pub struct X448();

#[derive(Debug, Clone, Copy)]
pub struct X448PrivKey(FFInt<'static, curve448::OpaqueUint>);

#[derive(Debug, Clone, Copy)]
pub struct X448PubKey(PFInt<'static, curve448::OpaqueUint>);

#[derive(PartialEq, Debug, Clone, Copy)]
pub struct X448SharedKey(PFInt<'static, curve448::OpaqueUint>);

impl FromBytes for X448PrivKey {
    type Bytes = [u8; curve448::SIZE];

    fn from_be_bytes(bytes: &Self::Bytes) -> Self {
        let mut encoded = bytes.clone();
        encoded[curve448::SIZE - 1] &= 0xfc;
        encoded[0] |= 0x80;
        Self(FFInt::from_be_bytes(
            &encoded,
            &curve448::CURVE448_FINITE_FIELD,
        ))
    }

    fn from_le_bytes(bytes: &Self::Bytes) -> Self {
        let mut encoded = bytes.clone();
        encoded[0] &= 0xfc;
        encoded[curve448::SIZE - 1] |= 0x80;
        Self(FFInt::from_le_bytes(
            &encoded,
            &curve448::CURVE448_FINITE_FIELD,
        ))
    }
}

impl ToBytes for X448PrivKey {
    type Bytes = [u8; curve448::SIZE];

    fn to_be_bytes(&self) -> Self::Bytes {
        self.0.to_opaqueuint().to_be_byte_arr()
    }

    fn to_le_bytes(&self) -> Self::Bytes {
        self.0.to_opaqueuint().to_le_byte_arr()
    }
}

impl FromBytes for X448PubKey {
    type Bytes = [u8; curve448::SIZE];

    fn from_be_bytes(bytes: &Self::Bytes) -> Self {
        Self(PFInt::from_be_bytes(
            bytes,
            &curve448::CURVE448_PRIME_FIELD,
        ))
    }

    fn from_le_bytes(bytes: &Self::Bytes) -> Self {
        Self(PFInt::from_le_bytes(
            bytes,
            &curve448::CURVE448_PRIME_FIELD,
        ))
    }
}

impl ToBytes for X448PubKey {
    type Bytes = [u8; curve448::SIZE];

    fn to_be_bytes(&self) -> Self::Bytes {
        self.0.to_opaqueuint().to_be_byte_arr()
    }

    fn to_le_bytes(&self) -> Self::Bytes {
        self.0.to_opaqueuint().to_le_byte_arr()
    }
}

impl FromBytes for X448SharedKey {
    type Bytes = [u8; curve448::SIZE];

    fn from_be_bytes(bytes: &Self::Bytes) -> Self {
        Self(PFInt::from_be_bytes(
            bytes,
            &curve448::CURVE448_PRIME_FIELD,
        ))
    }

    fn from_le_bytes(bytes: &Self::Bytes) -> Self {
        Self(PFInt::from_le_bytes(
            bytes,
            &curve448::CURVE448_PRIME_FIELD,
        ))
    }
}

impl ToBytes for X448SharedKey {
    type Bytes = [u8; curve448::SIZE];

    fn to_be_bytes(&self) -> Self::Bytes {
        self.0.to_opaqueuint().to_be_byte_arr()
    }

    fn to_le_bytes(&self) -> Self::Bytes {
        self.0.to_opaqueuint().to_le_byte_arr()
    }
}

impl Key<{curve448::SIZE}> for X448PrivKey {
    const SIZE: usize = curve448::SIZE;
    fn from_slice(data: &[u8]) -> Self {
        let mut key_bytes = [0u8; curve448::SIZE];
        let mid = data.len().min(curve448::SIZE);
        for i in 0..mid {
            key_bytes[i] = data[i];
        }
        Self::from_ne_bytes(&key_bytes)
    }
}

impl Key<{curve448::SIZE}> for X448PubKey {
    const SIZE: usize = curve448::SIZE;
    fn from_slice(data: &[u8]) -> Self {
        let mut key_bytes = [0u8; curve448::SIZE];
        let mid = data.len().min(curve448::SIZE);
        for i in 0..mid {
            key_bytes[i] = data[i];
        }
        Self::from_ne_bytes(&key_bytes)
    }
}

impl Key<{curve448::SIZE}> for X448SharedKey {
    const SIZE: usize = curve448::SIZE;
    fn from_slice(data: &[u8]) -> Self {
        let mut key_bytes = [0u8; curve448::SIZE];
        let mid = data.len().min(curve448::SIZE);
        for i in 0..mid {
            key_bytes[i] = data[i];
        }
        Self::from_ne_bytes(&key_bytes)
    }
}

impl PrivateKey<{curve448::SIZE}> for X448PrivKey {}

impl PublicKey<{curve448::SIZE}> for X448PubKey {}

impl SharedSecret<{curve448::SIZE}> for X448SharedKey {}

impl KeyExchangeTrait<{curve448::SIZE}, X448PrivKey, X448PubKey, X448SharedKey> for X448 {

    fn shared_secret(private_key: X448PrivKey, public_key: X448PubKey) -> X448SharedKey {
        use curve448::*;
        let p = CURVE448.new_point(public_key.0);
        let shared = CURVE448.point_mul(&p, private_key.0);
        X448SharedKey(shared.point)
    }
    
    fn public_key(private_key: &X448PrivKey) -> X448PubKey {
        use curve448::*;
        let public_key = CURVE448.point_mul(&CURVE448_GENERATOR, private_key.0);
        X448PubKey(public_key.point)
    }
}


#[cfg(test)]
mod test {

    #[test]
    fn x448_x_dbl_test() {
        use super::*;
        use curve448::*;
        let u: [u8; 56] = [
            0x06, 0xfc, 0xe6, 0x40, 0xfa, 0x34, 0x87, 0xbf, 0xda, 0x5f, 0x6c, 0xf2, 0xd5, 0x26,
            0x3f, 0x8a, 0xad, 0x88, 0x33, 0x4c, 0xbd, 0x07, 0x43, 0x7f, 0x02, 0x0f, 0x08, 0xf9,
            0x81, 0x4d, 0xc0, 0x31, 0xdd, 0xbd, 0xc3, 0x8c, 0x19, 0xc6, 0xda, 0x25, 0x83, 0xfa,
            0x54, 0x29, 0xdb, 0x94, 0xad, 0xa1, 0x8a, 0xa7, 0xa7, 0xfb, 0x4e, 0xf8, 0xa0, 0x86,
        ];
        let ans_x: [u8; 56] = [
            0x7a, 0x79, 0xbd, 0x1a, 0xd7, 0x64, 0x8e, 0xb3, 0xab, 0x29, 0xe2, 0x61, 0xe1, 0x2a,
            0x1c, 0x57, 0x30, 0xb1, 0x18, 0xae, 0xd0, 0x68, 0x9e, 0xee, 0x17, 0x49, 0x41, 0xdc,
            0x29, 0x3c, 0x81, 0x31, 0x28, 0x92, 0x3a, 0x73, 0xa5, 0xb4, 0x70, 0x5d, 0x11, 0x7e,
            0x58, 0x60, 0x0f, 0xc0, 0x28, 0x4d, 0x93, 0x50, 0xe7, 0x7c, 0x1f, 0xd6, 0x39, 0x67,
        ];
        let ans_z: [u8; 56] = [
            0x0e, 0x52, 0xda, 0x55, 0x53, 0x72, 0x49, 0x18, 0xc9, 0x0f, 0x28, 0x99, 0xc1, 0x9c,
            0xaf, 0xde, 0x89, 0xb3, 0x21, 0x94, 0x12, 0xed, 0x05, 0x6a, 0xf7, 0xc8, 0x0c, 0x56,
            0x5b, 0x6a, 0x89, 0xee, 0x24, 0xae, 0x7b, 0xd2, 0xba, 0x04, 0x80, 0x1d, 0x71, 0xfa,
            0x78, 0xca, 0xc7, 0xfb, 0x5f, 0x2c, 0xe9, 0x4c, 0x97, 0x30, 0x93, 0x99, 0xd5, 0xc8,
        ];
        let u_i = PFInt::from_le_bytes(&u, &CURVE448_PRIME_FIELD);
        let ans_x_i = PFInt::from_be_bytes(&ans_x, &CURVE448_PRIME_FIELD);
        let ans_z_i = PFInt::from_be_bytes(&ans_z, &CURVE448_PRIME_FIELD);
        let one_i = PFInt::one(&CURVE448_PRIME_FIELD);
        let (x, z) = CURVE448.x_dbl((u_i, one_i));
        assert_eq!(x, ans_x_i);
        assert_eq!(z, ans_z_i);
    }

    #[test]
    fn x448_test1() {
        /// https://www.rfc-editor.org/rfc/rfc7748#section-5.2
        use super::*;

        let k: [u8; 56] = [
            0x3d, 0x26, 0x2f, 0xdd, 0xf9, 0xec, 0x8e, 0x88, 0x49, 0x52, 0x66, 0xfe, 0xa1, 0x9a,
            0x34, 0xd2, 0x88, 0x82, 0xac, 0xef, 0x04, 0x51, 0x04, 0xd0, 0xd1, 0xaa, 0xe1, 0x21,
            0x70, 0x0a, 0x77, 0x9c, 0x98, 0x4c, 0x24, 0xf8, 0xcd, 0xd7, 0x8f, 0xbf, 0xf4, 0x49,
            0x43, 0xeb, 0xa3, 0x68, 0xf5, 0x4b, 0x29, 0x25, 0x9a, 0x4f, 0x1c, 0x60, 0x0a, 0xd3,
        ];
        let u: [u8; 56] = [
            0x06, 0xfc, 0xe6, 0x40, 0xfa, 0x34, 0x87, 0xbf, 0xda, 0x5f, 0x6c, 0xf2, 0xd5, 0x26,
            0x3f, 0x8a, 0xad, 0x88, 0x33, 0x4c, 0xbd, 0x07, 0x43, 0x7f, 0x02, 0x0f, 0x08, 0xf9,
            0x81, 0x4d, 0xc0, 0x31, 0xdd, 0xbd, 0xc3, 0x8c, 0x19, 0xc6, 0xda, 0x25, 0x83, 0xfa,
            0x54, 0x29, 0xdb, 0x94, 0xad, 0xa1, 0x8a, 0xa7, 0xa7, 0xfb, 0x4e, 0xf8, 0xa0, 0x86,
        ];
        let r: [u8; 56] = [
            0xce, 0x3e, 0x4f, 0xf9, 0x5a, 0x60, 0xdc, 0x66, 0x97, 0xda, 0x1d, 0xb1, 0xd8, 0x5e,
            0x6a, 0xfb, 0xdf, 0x79, 0xb5, 0x0a, 0x24, 0x12, 0xd7, 0x54, 0x6d, 0x5f, 0x23, 0x9f,
            0xe1, 0x4f, 0xba, 0xad, 0xeb, 0x44, 0x5f, 0xc6, 0x6a, 0x01, 0xb0, 0x77, 0x9d, 0x98,
            0x22, 0x39, 0x61, 0x11, 0x1e, 0x21, 0x76, 0x62, 0x82, 0xf7, 0x3d, 0xd9, 0x6b, 0x6f,
        ];
        assert_eq!(
            X448::shared_secret(
                X448PrivKey::from_le_bytes(&k),
                X448PubKey::from_le_bytes(&u)
            ),
            X448SharedKey::from_le_bytes(&r)
        );
    }

    #[test]
    fn x448_test2() {
        /// https://www.rfc-editor.org/rfc/rfc7748#section-5.2
        use super::*;

        let k: [u8; 56] = [
            0x20, 0x3d, 0x49, 0x44, 0x28, 0xb8, 0x39, 0x93, 0x52, 0x66, 0x5d, 0xdc, 0xa4, 0x2f,
            0x9d, 0xe8, 0xfe, 0xf6, 0x00, 0x90, 0x8e, 0x0d, 0x46, 0x1c, 0xb0, 0x21, 0xf8, 0xc5,
            0x38, 0x34, 0x5d, 0xd7, 0x7c, 0x3e, 0x48, 0x06, 0xe2, 0x5f, 0x46, 0xd3, 0x31, 0x5c,
            0x44, 0xe0, 0xa5, 0xb4, 0x37, 0x12, 0x82, 0xdd, 0x2c, 0x8d, 0x5b, 0xe3, 0x09, 0x5f,
        ];
        let u: [u8; 56] = [
            0x0f, 0xbc, 0xc2, 0xf9, 0x93, 0xcd, 0x56, 0xd3, 0x30, 0x5b, 0x0b, 0x7d, 0x9e, 0x55,
            0xd4, 0xc1, 0xa8, 0xfb, 0x5d, 0xbb, 0x52, 0xf8, 0xe9, 0xa1, 0xe9, 0xb6, 0x20, 0x1b,
            0x16, 0x5d, 0x01, 0x58, 0x94, 0xe5, 0x6c, 0x4d, 0x35, 0x70, 0xbe, 0xe5, 0x2f, 0xe2,
            0x05, 0xe2, 0x8a, 0x78, 0xb9, 0x1c, 0xdf, 0xbd, 0xe7, 0x1c, 0xe8, 0xd1, 0x57, 0xdb,
        ];
        let r: [u8; 56] = [
            0x88, 0x4a, 0x02, 0x57, 0x62, 0x39, 0xff, 0x7a, 0x2f, 0x2f, 0x63, 0xb2, 0xdb, 0x6a,
            0x9f, 0xf3, 0x70, 0x47, 0xac, 0x13, 0x56, 0x8e, 0x1e, 0x30, 0xfe, 0x63, 0xc4, 0xa7,
            0xad, 0x1b, 0x3e, 0xe3, 0xa5, 0x70, 0x0d, 0xf3, 0x43, 0x21, 0xd6, 0x20, 0x77, 0xe6,
            0x36, 0x33, 0xc5, 0x75, 0xc1, 0xc9, 0x54, 0x51, 0x4e, 0x99, 0xda, 0x7c, 0x17, 0x9d,
        ];
        assert_eq!(
            X448::shared_secret(
                X448PrivKey::from_le_bytes(&k),
                X448PubKey::from_le_bytes(&u)
            ),
            X448SharedKey::from_le_bytes(&r)
        );
    }

    #[test]
    fn x448_test3() {
        /// https://datatracker.ietf.org/doc/html/rfc7748#section-6.2
        use super::*;

        let a_pri: [u8; 56] = [
            0x9a, 0x8f, 0x49, 0x25, 0xd1, 0x51, 0x9f, 0x57, 0x75, 0xcf, 0x46, 0xb0, 0x4b, 0x58,
            0x00, 0xd4, 0xee, 0x9e, 0xe8, 0xba, 0xe8, 0xbc, 0x55, 0x65, 0xd4, 0x98, 0xc2, 0x8d,
            0xd9, 0xc9, 0xba, 0xf5, 0x74, 0xa9, 0x41, 0x97, 0x44, 0x89, 0x73, 0x91, 0x00, 0x63,
            0x82, 0xa6, 0xf1, 0x27, 0xab, 0x1d, 0x9a, 0xc2, 0xd8, 0xc0, 0xa5, 0x98, 0x72, 0x6b,
        ];
        let a_pub: [u8; 56] = [
            0x9b, 0x08, 0xf7, 0xcc, 0x31, 0xb7, 0xe3, 0xe6, 0x7d, 0x22, 0xd5, 0xae, 0xa1, 0x21,
            0x07, 0x4a, 0x27, 0x3b, 0xd2, 0xb8, 0x3d, 0xe0, 0x9c, 0x63, 0xfa, 0xa7, 0x3d, 0x2c,
            0x22, 0xc5, 0xd9, 0xbb, 0xc8, 0x36, 0x64, 0x72, 0x41, 0xd9, 0x53, 0xd4, 0x0c, 0x5b,
            0x12, 0xda, 0x88, 0x12, 0x0d, 0x53, 0x17, 0x7f, 0x80, 0xe5, 0x32, 0xc4, 0x1f, 0xa0,
        ];
        let b_pri: [u8; 56] = [
            0x1c, 0x30, 0x6a, 0x7a, 0xc2, 0xa0, 0xe2, 0xe0, 0x99, 0x0b, 0x29, 0x44, 0x70, 0xcb,
            0xa3, 0x39, 0xe6, 0x45, 0x37, 0x72, 0xb0, 0x75, 0x81, 0x1d, 0x8f, 0xad, 0x0d, 0x1d,
            0x69, 0x27, 0xc1, 0x20, 0xbb, 0x5e, 0xe8, 0x97, 0x2b, 0x0d, 0x3e, 0x21, 0x37, 0x4c,
            0x9c, 0x92, 0x1b, 0x09, 0xd1, 0xb0, 0x36, 0x6f, 0x10, 0xb6, 0x51, 0x73, 0x99, 0x2d,
        ];
        let b_pub: [u8; 56] = [
            0x3e, 0xb7, 0xa8, 0x29, 0xb0, 0xcd, 0x20, 0xf5, 0xbc, 0xfc, 0x0b, 0x59, 0x9b, 0x6f,
            0xec, 0xcf, 0x6d, 0xa4, 0x62, 0x71, 0x07, 0xbd, 0xb0, 0xd4, 0xf3, 0x45, 0xb4, 0x30,
            0x27, 0xd8, 0xb9, 0x72, 0xfc, 0x3e, 0x34, 0xfb, 0x42, 0x32, 0xa1, 0x3c, 0xa7, 0x06,
            0xdc, 0xb5, 0x7a, 0xec, 0x3d, 0xae, 0x07, 0xbd, 0xc1, 0xc6, 0x7b, 0xf3, 0x36, 0x09,
        ];
        let shared: [u8; 56] = [
            0x07, 0xff, 0xf4, 0x18, 0x1a, 0xc6, 0xcc, 0x95, 0xec, 0x1c, 0x16, 0xa9, 0x4a, 0x0f,
            0x74, 0xd1, 0x2d, 0xa2, 0x32, 0xce, 0x40, 0xa7, 0x75, 0x52, 0x28, 0x1d, 0x28, 0x2b,
            0xb6, 0x0c, 0x0b, 0x56, 0xfd, 0x24, 0x64, 0xc3, 0x35, 0x54, 0x39, 0x36, 0x52, 0x1c,
            0x24, 0x40, 0x30, 0x85, 0xd5, 0x9a, 0x44, 0x9a, 0x50, 0x37, 0x51, 0x4a, 0x87, 0x9d,
        ];
        assert_eq!(
            X448::shared_secret(
                X448PrivKey::from_le_bytes(&a_pri),
                X448PubKey::from_le_bytes(&b_pub)
            ),
            X448SharedKey::from_le_bytes(&shared)
        );
        assert_eq!(
            X448::shared_secret(
                X448PrivKey::from_le_bytes(&b_pri),
                X448PubKey::from_le_bytes(&a_pub)
            ),
            X448SharedKey::from_le_bytes(&shared)
        );
    }
}
