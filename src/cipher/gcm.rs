/// See https://csrc.nist.rip/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf
use std::ops::{Add, Mul};

use num_traits::{ConstZero, Euclid, FromBytes, ToBytes};

use crate::finite_field::uint_arr::{UintArr, UintArrTrait, arr_len};

use super::*;

/// GCM works with blocks of 16 bytes
pub const GCM_BLK_SIZE: usize = 16;

type WORD = u32;
// const OPQAUE_UINT_LEN: usize = GCM_BLK_SIZE / (Word::BITS / u8::BITS) as usize;

type OpaqueUint = UintArr<WORD, {arr_len::<WORD>(GCM_BLK_SIZE)}, GCM_BLK_SIZE>;

#[derive(Debug, Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]
struct GcmBlk(OpaqueUint);

#[derive(Debug, Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]
struct GcmCounter(GcmBlk);

#[derive(Debug)]
pub struct GCM<const KEY_SIZE: usize, const TAG_SIZE: usize, K, E> 
    where K: Key<KEY_SIZE>, 
        E: Fn(&[u8; GCM_BLK_SIZE], &K) -> [u8; GCM_BLK_SIZE],
{
    key: K,
    encrypt_fn: E,
    h: GcmBlk,
}

impl Add for GcmBlk {
    type Output = GcmBlk;
    fn add(self, rhs: Self) -> Self::Output {
        Self(self.0 ^ rhs.0)
    }
}

impl Mul for GcmBlk {
    type Output = GcmBlk;

    fn mul(self, y: Self) -> Self::Output {
        // note that the data should be treated as bit strings in little-endian
        type T = OpaqueUint;
        let mut r_bytes = [0u8; GCM_BLK_SIZE];
        r_bytes[0] = 0b11100001;
        let r = T::from_be_bytes(&r_bytes);
        let (mut z, mut v) = (T::ZERO, self.0);
        for i in 0..T::BITS {
            let yi = y.0.bit(T::BITS - i - 1);
            z = z ^ (v & T::bit_to_mask(yi));
            let v_high_bit = v.bit(0);
            let v_shr1 = v.div_euclid(&T::TWO);
            v = v_shr1 ^ (r & T::bit_to_mask(v_high_bit));
        }
        GcmBlk(z)
    }
}

impl GcmCounter {
    fn new(init_vec_be: &[u8], h: &GcmBlk) -> Self {
        match init_vec_be.len() == 12 {
            true => {
                let mut uint_arr = [0u8; GCM_BLK_SIZE];
                for i in 0..init_vec_be.len() {
                    uint_arr[i] = init_vec_be[i];
                }
                uint_arr[GCM_BLK_SIZE - 1] = 1;
                Self(GcmBlk(UintArr::from_be_bytes(uint_arr.as_slice())))
            }
            false => Self(ghash(h, &[], init_vec_be)),
        }
    }

    fn inc(self) -> Self {
        let mut uint_arr = self.0 .0.to_le_bytes();
        let counter_bytes = [uint_arr[0], uint_arr[1], uint_arr[2], uint_arr[3]];
        let counter = u32::from_le_bytes(counter_bytes).wrapping_add(1);
        [uint_arr[0], uint_arr[1], uint_arr[2], uint_arr[3]] = counter.to_le_bytes();
        Self(GcmBlk(UintArr::from_le_bytes(uint_arr.as_slice())))
    }
}

impl<const KEY_SIZE: usize, const TAG_SIZE: usize, K, E> GCM<KEY_SIZE, TAG_SIZE, K, E> 
    where K: Key<KEY_SIZE>,
        E: Fn(&[u8; GCM_BLK_SIZE], &K) -> [u8; GCM_BLK_SIZE],
{

    fn encrypted_y0(&self, iv: &[u8], h: &GcmBlk) -> GcmBlk {
        type T = OpaqueUint;
        let y0_blk = GcmCounter::new(&iv, h);
        let y0_vec = y0_blk.0.0.to_be_bytes();
        let mut y0_bytes = [0u8; GCM_BLK_SIZE];
        for i in 0..y0_vec.len() {
            y0_bytes[i] = y0_vec[i];
        }
        GcmBlk(T::from_be_bytes(&(self.encrypt_fn)(&y0_bytes, &self.key)))
    }

    pub fn new(key: K, encrypt_fn: E) -> Self {
        type T = OpaqueUint;
        let h_bytes = encrypt_fn(&[0u8; GCM_BLK_SIZE], &key);
        let h = GcmBlk(T::from_be_bytes(&h_bytes));
        Self {
            key: key,
            encrypt_fn: encrypt_fn,
            h: h,
        }
    }

    fn compute_encrypted_counters(&self, n: usize, mut counter: GcmCounter) -> Vec<GcmBlk> {
        type T = OpaqueUint;
        let mut encrypted_counter = Vec::with_capacity(n);
        for _i in 0..n {
            counter = counter.inc();
            let counter_vec = counter.0.0.to_be_bytes();
            let mut counter_bytes = [0u8; GCM_BLK_SIZE];
            for j in 0..counter_vec.len() {
                counter_bytes[j] = counter_vec[j];
            }
            let y_i = (self.encrypt_fn)(&counter_bytes, &self.key);
            encrypted_counter.push(GcmBlk(T::from_be_bytes(&y_i)));
        }
        encrypted_counter
    }


}

impl<const KEY_SIZE: usize, const TAG_SIZE: usize, K: Key<KEY_SIZE>, E> AEAD for GCM<KEY_SIZE, TAG_SIZE, K, E> 
    where E: Fn(&[u8; GCM_BLK_SIZE], &K) -> [u8; GCM_BLK_SIZE]
{
    type Input = [u8];

    type AAD = [u8];

    type Output = Vec<u8>;

    type Authentication = Vec<u8>;

    fn encrypt(&self, plaintext: &Self::Input, iv: &Self::Input) -> Self::Output {
        type T = OpaqueUint;
        if plaintext.len() == 0 {
            return Vec::new();
        }
        let mut ciphertext: Vec<u8> = Vec::with_capacity(plaintext.len());
        let n = plaintext.len().div_ceil(GCM_BLK_SIZE);
        let n_sub1 = n.saturating_sub(1);
        let u = plaintext.len() - n_sub1 * GCM_BLK_SIZE;
        let encrypted_counters = self.compute_encrypted_counters(n, GcmCounter::new(iv, &self.h));
        for i in 0..n_sub1 {
            let p_i = GcmBlk(T::from_be_bytes(
                &plaintext[i * GCM_BLK_SIZE..(i + 1) * GCM_BLK_SIZE],
            ));
            let c_i = p_i.add(encrypted_counters[i]);
            ciphertext.extend(c_i.0.to_be_bytes());
        }
        let p_n = GcmBlk(T::from_be_bytes(&plaintext[n_sub1 * GCM_BLK_SIZE..]));
        let c_n = p_n.add(encrypted_counters[n_sub1]);
        ciphertext.extend_from_slice(&c_n.0.to_be_bytes()[..u]);
        ciphertext
    }

    fn decrypt(&self, ciphertext: &Self::Input, iv: &Self::Input) -> Self::Output {
        type T = OpaqueUint;
        if ciphertext.len() == 0 {
            return Vec::new();
        }
        let mut plaintext: Vec<u8> = Vec::with_capacity(ciphertext.len());
        let n = ciphertext.len().div_ceil(GCM_BLK_SIZE);
        let n_sub1 = n.saturating_sub(1);
        let u = ciphertext.len() - n_sub1 * GCM_BLK_SIZE;
        let encrypted_counters = self.compute_encrypted_counters(n, GcmCounter::new(iv, &self.h));
        for i in 0..n_sub1 {
            let c_i = GcmBlk(T::from_be_bytes(
                &ciphertext[i * GCM_BLK_SIZE..(i + 1) * GCM_BLK_SIZE],
            ));
            let p_i = c_i.add(encrypted_counters[i]);
            plaintext.extend(p_i.0.to_be_bytes());
        }
        let c_n = GcmBlk(T::from_be_bytes(&ciphertext[n_sub1 * GCM_BLK_SIZE..]));
        let p_n = c_n.add(encrypted_counters[n_sub1]);
        plaintext.extend_from_slice(&p_n.0.to_be_bytes()[..u]);
        plaintext
    }

    fn authentication_tag(
        &self,
        ciphertext: &[u8],
        iv: &[u8],
        aad: &[u8],
    ) -> Vec<u8> {
        let mut auth: Vec<u8> = Vec::with_capacity(TAG_SIZE);
        auth.extend_from_slice(
            &ghash(&self.h, aad, ciphertext)
                .add(self.encrypted_y0(iv, &self.h))
                .0
                .to_be_bytes()[..TAG_SIZE],
        );
        auth
    }

}

fn ghash_helper(mut x: GcmBlk, h: &GcmBlk, a: &[u8]) -> GcmBlk {
    type T = OpaqueUint;
    let m = a.len().div_ceil(GCM_BLK_SIZE);
    let m_sub1 = m.saturating_sub(1);
    let v = a.len() - m_sub1 * GCM_BLK_SIZE;
    for i in 0..m_sub1 {
        let a_i = GcmBlk(T::from_be_bytes(&a[(i * GCM_BLK_SIZE)..((i + 1) * GCM_BLK_SIZE)]));
        x = x.add(a_i).mul(*h);
    }
    let a_m = {
        let mut tmp = [0u8; GCM_BLK_SIZE];
        for i in 0..v {
            tmp[i] = a[m_sub1 * GCM_BLK_SIZE + i];
        }
        GcmBlk(T::from_be_bytes(&tmp))
    };
    x = x.add(a_m).mul(*h);
    x
}

/// Notations:
///     The block cipher encryption of the value X with the key K is denoted as E(K, X)
///     additional au­thenticated data (A1, A2, ..., Am-1 Am*)
///     ciphertext (C1, C2, ..., Cn−1, Cn*)
///
/// The function GHASH is defined by GHASH(H, A, C) = Xm+n+1, where the inputs A and C are
fn ghash(h: &GcmBlk, a: &[u8], c: &[u8]) -> GcmBlk {
    type T = OpaqueUint;
    let mut x = ghash_helper(GcmBlk(UintArr::ZERO), h, a);
    x = ghash_helper(x, h, c);
    let (len_a, len_c) = (
        a.len() as u64 * u8::BITS as u64,
        c.len() as u64 * u8::BITS as u64,
    );
    let len_ac = {
        const LEN_SIZE: usize = (u64::BITS / u8::BITS) as usize;
        let len_a_bytes = len_a.to_be_bytes();
        let len_c_bytes = len_c.to_be_bytes();
        let mut tmp = [0u8; 2 * LEN_SIZE];
        for i in 0..LEN_SIZE {
            tmp[i] = len_a_bytes[i];
            tmp[i + LEN_SIZE] = len_c_bytes[i];
        }
        GcmBlk(T::from_be_bytes(&tmp))
    };
    x = x.add(len_ac).mul(*h);
    x
}

#[cfg(test)]
mod test {

    use super::*;

    #[test]
    fn gcmblk_mul_test1() {
        type T = OpaqueUint;
        let a: [u8; 16] = [
            0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92, 0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2,
            0xfe, 0x78,
        ];
        let b: [u8; 16] = [
            0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b, 0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34,
            0x2b, 0x2e,
        ];
        let c: [u8; 16] = [
            0x5e, 0x2e, 0xc7, 0x46, 0x91, 0x70, 0x62, 0x88, 0x2c, 0x85, 0xb0, 0x68, 0x53, 0x53,
            0xde, 0xb7,
        ];
        assert_eq!(
            GcmBlk(T::from_be_bytes(&a)) * GcmBlk(T::from_be_bytes(&b)),
            GcmBlk(T::from_be_bytes(&c))
        );
    }

    #[test]
    fn aes128gcm_test1() {
        use num_traits::FromBytes;
        let key = AES128Key::from_be_bytes(&[
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ]);
        let plaintext: [u8; 0] = [];
        let iv: [u8; 12] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let ciphertext: [u8; 0] = [];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61, 0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7,
            0x45, 0x5a,
        ];
        let gcm1 = GCM::new(key.clone(), AES128::encrypt);
        let gcm2 = GCM::new(key.clone(), AES128::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes128gcm_test2() {
        use num_traits::FromBytes;
        let key = AES128Key::from_be_bytes(&[
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ]);
        let plaintext: [u8; 16] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ];
        let iv: [u8; 12] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let ciphertext: [u8; 16] = [
            0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92, 0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2,
            0xfe, 0x78,
        ];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd, 0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57,
            0xbd, 0xdf,
        ];
        let gcm1 = GCM::new(key.clone(), AES128::encrypt);
        let gcm2 = GCM::new(key.clone(), AES128::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes128gcm_test3() {
        use num_traits::FromBytes;
        let key = AES128Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08,
        ]);
        let plaintext: [u8; 64] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55,
        ];
        let iv: [u8; 12] = [
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ];
        let ciphertext: [u8; 64] = [
            0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24, 0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0,
            0xd4, 0x9c, 0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0, 0x35, 0xc1, 0x7e, 0x23,
            0x29, 0xac, 0xa1, 0x2e, 0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c, 0x7d, 0x8f,
            0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05, 0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
            0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85,
        ];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6, 0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6,
            0xfa, 0xb4,
        ];
        let gcm1 = GCM::new(key.clone(), AES128::encrypt);
        let gcm2 = GCM::new(key.clone(), AES128::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes128gcm_test4() {
        use num_traits::FromBytes;
        let key = AES128Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 12] = [
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ];
        let ciphertext: [u8; 60] = [
            0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24, 0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0,
            0xd4, 0x9c, 0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0, 0x35, 0xc1, 0x7e, 0x23,
            0x29, 0xac, 0xa1, 0x2e, 0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c, 0x7d, 0x8f,
            0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05, 0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
            0x3d, 0x58, 0xe0, 0x91,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb, 0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12,
            0x1a, 0x47,
        ];
        let gcm1 = GCM::new(key.clone(), AES128::encrypt);
        let gcm2 = GCM::new(key.clone(), AES128::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes128gcm_test5() {
        use num_traits::FromBytes;
        let key = AES128Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 8] = [0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad];
        let ciphertext: [u8; 60] = [
            0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a, 0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a,
            0x47, 0x55, 0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8, 0x37, 0x66, 0xe5, 0xf9,
            0x7b, 0x6c, 0x74, 0x23, 0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2, 0x2b, 0x09,
            0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42, 0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
            0xc2, 0x3f, 0x45, 0x98,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85, 0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2,
            0xfc, 0xcb,
        ];
        let gcm1 = GCM::new(key.clone(), AES128::encrypt);
        let gcm2 = GCM::new(key.clone(), AES128::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes128gcm_test6() {
        use num_traits::FromBytes;
        let key = AES128Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 60] = [
            0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5, 0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52,
            0x69, 0xaa, 0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1, 0xe4, 0xc3, 0x03, 0xd2,
            0xa3, 0x18, 0xa7, 0x28, 0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39, 0xfc, 0xf0,
            0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54, 0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
            0xa6, 0x37, 0xb3, 0x9b,
        ];
        let ciphertext: [u8; 60] = [
            0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6, 0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f,
            0xb8, 0x94, 0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8, 0xba, 0x26, 0x2a, 0x3c,
            0xca, 0x7e, 0x2c, 0xa7, 0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90, 0xcc, 0xdc,
            0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f, 0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
            0x4c, 0x34, 0xae, 0xe5,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa, 0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99,
            0xd0, 0x50,
        ];
        let gcm1 = GCM::new(key.clone(), AES128::encrypt);
        let gcm2 = GCM::new(key.clone(), AES128::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes192gcm_test1() {
        use num_traits::FromBytes;
        let key = AES192Key::from_be_bytes(&[
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        let plaintext: [u8; 0] = [];
        let iv: [u8; 12] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let ciphertext: [u8; 0] = [];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b, 0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57,
            0x24, 0x35,
        ];
        let gcm1 = GCM::new(key.clone(), AES192::encrypt);
        let gcm2 = GCM::new(key.clone(), AES192::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes192gcm_test2() {
        use num_traits::FromBytes;
        let key = AES192Key::from_be_bytes(&[
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        let plaintext: [u8; 16] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ];
        let iv: [u8; 12] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let ciphertext: [u8; 16] = [
            0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41, 0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0,
            0xf6, 0x00,
        ];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab, 0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14,
            0xf0, 0xfb,
        ];
        let gcm1 = GCM::new(key.clone(), AES192::encrypt);
        let gcm2 = GCM::new(key.clone(), AES192::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes192gcm_test3() {
        use num_traits::FromBytes;
        let key = AES192Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        ]);
        let plaintext: [u8; 64] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55,
        ];
        let iv: [u8; 12] = [
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ];
        let ciphertext: [u8; 64] = [
            0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41, 0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a,
            0x27, 0x57, 0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84, 0x62, 0x85, 0x93, 0xb4,
            0x0c, 0xa1, 0xe1, 0x9c, 0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25, 0xac, 0x61,
            0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47, 0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
            0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56,
        ];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf, 0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67,
            0x4a, 0x14,
        ];
        let gcm1 = GCM::new(key.clone(), AES192::encrypt);
        let gcm2 = GCM::new(key.clone(), AES192::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes192gcm_test4() {
        use num_traits::FromBytes;
        let key = AES192Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 12] = [
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ];
        let ciphertext: [u8; 60] = [
            0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41, 0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a,
            0x27, 0x57, 0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84, 0x62, 0x85, 0x93, 0xb4,
            0x0c, 0xa1, 0xe1, 0x9c, 0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25, 0xac, 0x61,
            0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47, 0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
            0xcc, 0xda, 0x27, 0x10,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f, 0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27,
            0x61, 0x8c,
        ];
        let gcm1 = GCM::new(key.clone(), AES192::encrypt);
        let gcm2 = GCM::new(key.clone(), AES192::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes192gcm_test5() {
        use num_traits::FromBytes;
        let key = AES192Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 8] = [0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad];
        let ciphertext: [u8; 60] = [
            0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54, 0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32,
            0x4d, 0xb8, 0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f, 0x83, 0x47, 0x28, 0x0f,
            0xc4, 0x50, 0x70, 0x57, 0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75, 0xc6, 0x65,
            0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9, 0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
            0xa0, 0xf0, 0x62, 0xf7,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24, 0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35,
            0x33, 0xf8,
        ];
        let gcm1 = GCM::new(key.clone(), AES192::encrypt);
        let gcm2 = GCM::new(key.clone(), AES192::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes192gcm_test6() {
        use num_traits::FromBytes;
        let key = AES192Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 60] = [
            0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5, 0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52,
            0x69, 0xaa, 0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1, 0xe4, 0xc3, 0x03, 0xd2,
            0xa3, 0x18, 0xa7, 0x28, 0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39, 0xfc, 0xf0,
            0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54, 0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
            0xa6, 0x37, 0xb3, 0x9b,
        ];
        let ciphertext: [u8; 60] = [
            0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c, 0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc,
            0xf9, 0xff, 0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef, 0x6e, 0xf7, 0xb7, 0x98,
            0x28, 0x66, 0x6e, 0x45, 0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9, 0xe2, 0xf0,
            0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3, 0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
            0xe9, 0xb7, 0x37, 0x3b,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb, 0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76,
            0xa6, 0xd9,
        ];
        let gcm1 = GCM::new(key.clone(), AES192::encrypt);
        let gcm2 = GCM::new(key.clone(), AES192::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes256gcm_test1() {
        use num_traits::FromBytes;
        let key = AES256Key::from_be_bytes(&[
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ]);
        let plaintext: [u8; 0] = [];
        let iv: [u8; 12] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let ciphertext: [u8; 0] = [];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9, 0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb,
            0x73, 0x8b,
        ];
        let gcm1 = GCM::new(key.clone(), AES256::encrypt);
        let gcm2 = GCM::new(key.clone(), AES256::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes256gcm_test2() {
        use num_traits::FromBytes;
        let key = AES256Key::from_be_bytes(&[
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ]);
        let plaintext: [u8; 16] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ];
        let iv: [u8; 12] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        let ciphertext: [u8; 16] = [
            0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e, 0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3,
            0x9d, 0x18,
        ];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0, 0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a,
            0xb9, 0x19,
        ];
        let gcm1 = GCM::new(key.clone(), AES256::encrypt);
        let gcm2 = GCM::new(key.clone(), AES256::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes256gcm_test3() {
        use num_traits::FromBytes;
        let key = AES256Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94,
            0x67, 0x30, 0x83, 0x08,
        ]);
        let plaintext: [u8; 64] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55,
        ];
        let iv: [u8; 12] = [
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ];
        let ciphertext: [u8; 64] = [
            0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07, 0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84,
            0x42, 0x7d, 0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9, 0x75, 0x98, 0xa2, 0xbd,
            0x25, 0x55, 0xd1, 0xaa, 0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d, 0xa7, 0xb0,
            0x8b, 0x10, 0x56, 0x82, 0x88, 0x38, 0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
            0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad,
        ];
        let aad: [u8; 0] = [];
        let tag: [u8; 16] = [
            0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd, 0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3,
            0xcc, 0x6c,
        ];
        let gcm1 = GCM::new(key.clone(), AES256::encrypt);
        let gcm2 = GCM::new(key.clone(), AES256::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes256gcm_test4() {
        use num_traits::FromBytes;
        let key = AES256Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94,
            0x67, 0x30, 0x83, 0x08,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 12] = [
            0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88,
        ];
        let ciphertext: [u8; 60] = [
            0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07, 0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84,
            0x42, 0x7d, 0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9, 0x75, 0x98, 0xa2, 0xbd,
            0x25, 0x55, 0xd1, 0xaa, 0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d, 0xa7, 0xb0,
            0x8b, 0x10, 0x56, 0x82, 0x88, 0x38, 0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
            0xbc, 0xc9, 0xf6, 0x62,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68, 0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d,
            0x55, 0x1b,
        ];
        let gcm1 = GCM::new(key.clone(), AES256::encrypt);
        let gcm2 = GCM::new(key.clone(), AES256::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes256gcm_test5() {
        use num_traits::FromBytes;
        let key = AES256Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94,
            0x67, 0x30, 0x83, 0x08,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 8] = [0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad];
        let ciphertext: [u8; 60] = [
            0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32, 0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98,
            0x44, 0xcb, 0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa, 0xc5, 0x2f, 0xf7, 0xd7,
            0x9b, 0xba, 0x9d, 0xe0, 0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0, 0x95, 0x4c,
            0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78, 0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
            0xf4, 0x7c, 0x9b, 0x1f,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4, 0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e,
            0xa8, 0xf2,
        ];
        let gcm1 = GCM::new(key.clone(), AES256::encrypt);
        let gcm2 = GCM::new(key.clone(), AES256::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }

    #[test]
    fn aes256gcm_test6() {
        use num_traits::FromBytes;
        let key = AES256Key::from_be_bytes(&[
            0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30,
            0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94,
            0x67, 0x30, 0x83, 0x08,
        ]);
        let plaintext: [u8; 60] = [
            0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5,
            0x26, 0x9a, 0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d,
            0x8a, 0x31, 0x8a, 0x72, 0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf,
            0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25, 0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
            0xba, 0x63, 0x7b, 0x39,
        ];
        let iv: [u8; 60] = [
            0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5, 0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52,
            0x69, 0xaa, 0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1, 0xe4, 0xc3, 0x03, 0xd2,
            0xa3, 0x18, 0xa7, 0x28, 0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39, 0xfc, 0xf0,
            0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54, 0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
            0xa6, 0x37, 0xb3, 0x9b,
        ];
        let ciphertext: [u8; 60] = [
            0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1, 0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e,
            0x2a, 0x20, 0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19, 0xa0, 0x58, 0xab, 0x4f,
            0x6f, 0x74, 0x6b, 0xf4, 0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45, 0x2d, 0xa3,
            0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde, 0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
            0x44, 0xae, 0x7e, 0x3f,
        ];
        let aad: [u8; 20] = [
            0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad,
            0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2,
        ];
        let tag: [u8; 16] = [
            0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0, 0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9,
            0xf1, 0x9a,
        ];
        let gcm1 = GCM::new(key.clone(), AES256::encrypt);
        let gcm2 = GCM::new(key.clone(), AES256::encrypt);

        assert_eq!(gcm1.encrypt(&plaintext, &iv), ciphertext);
        assert_eq!(gcm2.decrypt(&ciphertext, &iv), plaintext);
        assert_eq!(
            gcm1.authentication_tag(&ciphertext, &iv, &aad),
            gcm2.authentication_tag(&ciphertext, &iv, &aad)
        );
        assert_eq!(gcm1.authentication_tag(&ciphertext, &iv, &aad), tag);
    }
}


pub type Aes128Gcm = GCM<{AES128Key::SIZE}, GCM_BLK_SIZE, AES128Key, fn(&[u8; GCM_BLK_SIZE], &AES128Key) -> [u8; GCM_BLK_SIZE]>;
pub type Aes192Gcm = GCM<{AES192Key::SIZE}, GCM_BLK_SIZE, AES192Key, fn(&[u8; GCM_BLK_SIZE], &AES192Key) -> [u8; GCM_BLK_SIZE]>;
pub type Aes256Gcm = GCM<{AES256Key::SIZE}, GCM_BLK_SIZE, AES256Key, fn(&[u8; GCM_BLK_SIZE], &AES256Key) -> [u8; GCM_BLK_SIZE]>;

